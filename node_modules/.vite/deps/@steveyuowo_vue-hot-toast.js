import {
  Fragment,
  Teleport,
  computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  defineComponent,
  normalizeClass,
  normalizeStyle,
  openBlock,
  reactive,
  ref,
  renderList,
  toDisplayString,
  unref,
  watchEffect,
  withModifiers
} from "./chunk-ZY5X6FX7.js";
import "./chunk-G3PMV62Z.js";

// node_modules/@steveyuowo/vue-hot-toast/dist/vue-hot-toast.es.js
var j = { class: "VueHotToast__icon" };
var I = { key: 0 };
var S = ["src"];
var B = {
  key: 1,
  class: "VueHotToast__checkmark"
};
var D = {
  key: 2,
  class: "VueHotToast__error"
};
var M = {
  key: 3,
  class: "VueHotToast__loading"
};
var L = { class: "content" };
var N = { class: "content-message" };
var U = defineComponent({
  __name: "ToasterItem",
  props: {
    id: {},
    type: {},
    message: {},
    autoClose: { type: Boolean },
    duration: {},
    icon: {},
    position: {}
  },
  emits: ["close"],
  setup(t, { emit: e }) {
    const o = t, s = e, n = ref(null), y = ref(0), f = ref(0), d = ref(false), _ = () => {
      d.value || (d.value = true, setTimeout(() => {
        s("close");
      }, 400));
    };
    return watchEffect(() => {
      o.autoClose && (y.value = Date.now(), f.value = o.duration, n.value = setTimeout(_, f.value));
    }), (r, J) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(["VueHotToast__toast", { leaving: d.value }]),
      style: normalizeStyle(`--toast-duration: ${r.duration}s;`),
      onClick: withModifiers(_, ["prevent"])
    }, [
      createBaseVNode("div", j, [
        r.icon ? (openBlock(), createElementBlock("div", I, [
          createBaseVNode("img", {
            class: "VueHotToast__custom-icon",
            src: r.icon,
            width: 24,
            height: 24,
            alt: "Toast Icon"
          }, null, 8, S)
        ])) : r.type === "success" ? (openBlock(), createElementBlock("div", B)) : r.type === "error" ? (openBlock(), createElementBlock("div", D)) : r.type === "loading" ? (openBlock(), createElementBlock("div", M)) : createCommentVNode("", true)
      ]),
      createBaseVNode("div", L, [
        createBaseVNode("div", N, toDisplayString(r.message), 1)
      ])
    ], 6));
  }
});
var $ = {
  type: "info",
  message: "Here's your toast.",
  autoClose: true,
  duration: 3e3,
  position: "top-center"
};
function z() {
  let t = (/* @__PURE__ */ new Date()).getTime();
  var e = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
    /[xy]/g,
    function(o) {
      var s = (t + Math.random() * 16) % 16 | 0;
      return t = Math.floor(t / 16), (o == "x" ? s : s & 3 | 8).toString(16);
    }
  );
  return e;
}
var a = reactive({
  notifications: []
});
var p = function() {
  const t = (e) => {
    const o = Object.assign({ ...$ }, e), s = z();
    return a.notifications.unshift(
      {
        id: s,
        ...o
      }
    ), s;
  };
  return t.update = (e, o) => {
    const s = a.notifications.findIndex(
      (n) => n.id === e
    );
    if (s === -1)
      throw t(o), new Error("Can't find toast");
    return Object.assign(a.notifications[s], o), e;
  }, t._handleOptions = (e, o) => {
    const s = Object.assign(o ?? {}, { type: e });
    return t(s);
  }, t.loading = (e, o) => t._handleOptions(
    "loading",
    Object.assign(o ?? {}, { message: e })
  ), t.success = (e, o) => t._handleOptions(
    "success",
    Object.assign(o ?? {}, { message: e })
  ), t.error = (e, o) => t._handleOptions(
    "error",
    Object.assign(o ?? {}, { message: e })
  ), t.promise = (e, o) => {
    const s = t.loading(o.loading, {
      position: o.position
    });
    return e.then((n) => (t.update(s, {
      message: o.success,
      type: "success",
      position: o.position
    }), s)).catch((n) => {
      throw t.update(s, {
        message: o.error,
        type: "error",
        position: o.position
      }), n;
    });
  }, t;
}();
var A = (t) => {
  const e = a.notifications.findIndex((o) => o.id === t);
  e !== -1 && a.notifications.splice(e, 1);
};
var q = defineComponent({
  __name: "Toaster",
  setup(t) {
    const e = computed(() => a.notifications.length > 0 ? a.notifications[0].position : "top-center");
    return (o, s) => (openBlock(), createBlock(Teleport, { to: "body" }, [
      createBaseVNode("div", {
        class: normalizeClass(["VueHotToast__toast-container", `VueHotToast__${e.value}`])
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(a).notifications, (n) => (openBlock(), createBlock(U, {
          key: n.id,
          id: n.id,
          type: n.type,
          message: n.message,
          "auto-close": n.autoClose,
          duration: n.duration,
          icon: n.icon,
          position: n.position,
          onClose: () => {
            unref(A)(n.id);
          }
        }, null, 8, ["id", "type", "message", "auto-close", "duration", "icon", "position", "onClose"]))), 128))
      ], 2)
    ]));
  }
});
function G(t, e) {
  return p.loading(t, {
    autoClose: false,
    position: e
  });
}
function K(t, e, o) {
  p.update(e, {
    message: t,
    type: "success",
    autoClose: true,
    duration: 3e3,
    position: o
  });
}
function P(t, e, o) {
  p.update(e, {
    message: F(t),
    type: "error",
    autoClose: true,
    duration: 3e3,
    position: o
  });
}
function F(t) {
  if (!t)
    return "Undefined Error";
  if (typeof t == "string")
    return t;
  if (t instanceof Error) {
    const e = t;
    return e.reason ?? e.message;
  } else
    return JSON.stringify(t);
}
export {
  q as Toaster,
  p as toast,
  P as toastError,
  G as toastLoading,
  K as toastSuccess
};
//# sourceMappingURL=@steveyuowo_vue-hot-toast.js.map
